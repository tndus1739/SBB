
	src/main/resources
		templates : View 페이지가 위치해야될 폴더 , thymeleaf -> spring boot 에서 지원
		static    : 외부 css , 외부 js , 그림이미지 파일 
		application.properties : spring boot 의 각종 설정, DB 설정 , JPA , View 설정 , 톰켓 포토 설정
		
	src/main/java :	백엔드에 자바코드를 넣음
	src/test/java :	test 코드를 넣음
		
	build.gradle  : 라이브러리 적용 파일 ( 그레들 )
	
	@ ( 어노테이션 ) : 프레임워크의 기술을 자동으로 처리
		
	- @Controller : client 의 요청을 받는 클래스라고 정의 ( 클래스는 빈껍데기인데 객체화를 시켜주는 역할이 바로 @Controller)
		- class 블락 할당 , 스프링 프레임워크에 빈 (객체화) 등록 ( RAM 등록 )
	
	- @GetMapping("/hello") : client 의 get 요청을 처리하는 어노테이션
		- 메소드 위에 할당
		(http://localhost:8585) 까지는 생략을 하고 /hello 호출
		- url 로 넘기는 것은 전부 "get" 방식
		- form method="get"
		- a href = ""  ( 링크로 넘어가는 요청은 전부 "get요청"
    
    - @PostMapping ("login.do")
    	- form method="post" action = "login.do"
    	- form 형식으로 넘기는 요청은 "post 요청"
    
    - @ResponseBody 
    	- 메소드 위에 할당 , JSON 포멧으로 전송, 문자열 자체를 전송 (문자열 자체를 return으로 돌려줌)
    	
    	
   ★ Spring에서 라이브러리 관리 (JDK 와 Spring 버전에 관련된 호환성 문제를 자동으로 관리해줌)
   	- 메이븐 : xml 형식으로 관리
	   	http://mvnrepository.com/ 
	   	pom.xml : 파일에서 라이브러리 관리
	   	
	- 그래들 : 그루비 문법으로 쉽게 관리  (메이븐에서 진화됨)
		build.gradle : 파일에서 관리
		
	STS4에서 Java EE로 확장 : html , jsp
		- 엔코딩 타입 : UTF-8 적용
		
	lombok 작동

	JPA : 인터페이스 , SQL쿼리 없이도 자바의 객체로 DB의 테이블을 생성 , 
		  SQL 쿼리 없이 자바의 객체의 메소드로 CRUD
		  유지 보수를 아주 쉽게 할 수 있다.
		  JPA를 구현한 구현체 하이버네이트
		  
		- ORM : 자바의 클래스나 메소드로 DB를 접슨할 수 있도록 하는 기술 	
		        유지 보수를 쉽게함
		        마이바티스(금융권 , SI) , JPA (솔루션)
	
	---------------------------------------------------------------------------------------
	
	build.gradle : 라이브러리 등록 
	1. JPA
	2. JDBC
	
	3. H2 DB
	4. Oracle DB
	5. MySQL db
	
	----------------------------------------------------------------------------------------
	
	application.properties --> 설정은 여기에서 함
	
	----------------------------------------------------------------------------------------
	JPA 라이브러리가 등록되었을 경우
	
	★★★★★
	@Entity : class 위에 할당 
	   - DB의 테이블을 매핑하는 클래스
	     - Question : 테이블명
	     - 필드 : 테이블의 컬럼과 연결
	
	     - @Id : 필드 위에 할당 , Primary Key ( 중복된 값을 못 넣도록 설정) , 테이블에 반드시 1개가 적용되어야 함
	     - @GeneratedValue  : 자동으로 값을 증가해서 생성해줌 , @Id와 같이 부여
	     - @Column : 컬럼의 제약 사항을 적용
	     
	     - 질문 (Question)  : 1 이라면, 질문에 대한 답변 (Answer) : 多 ( 1:多 관계 )
	     - 하나의 질문에 대해서 모든 답변을 가져올 수 있다
  		 cascade=CascadeType.REMOVE : 질문이 제거될 때 질문에 해당하는 모든 답변을 함께 제거함
		 @OneToMany(mappedBy = "question" , cascade=CascadeType.REMOVE) 
	
		 Foreign Key : Answer 테이블은 Question 테이블을 참조함
		 @ManyToOne : JPA에서 테이즐 간의 관계 설정 , 자식테이블(Answer)에서 부모테이블(Question)을 참조
		 question 컬럼은 Question 테이블의 Primary Key의 값이 들어옴
		 question 컬럼 이름이 question_id로 이름이 바뀜
		 @ManyToOne
	
	========================================================================================
	
	ORM : MyBatis , JPA , SQL쿼리문을 쓰지 않고 메소드를 사용해서 CRUD 
	Repository : DAO를 Repository 라고 호칭한다. DB의 CRUD하는 메소드가 적용되어있는 인터페이스
	
	public interface QuestionRepository extends JpaRepository<Question, Integer>{   //★★★★★ 중요함
	
	- 인터페이스 이름 짓는 방법 : Entity 클래스의 이름 + Repository
	- 상위 인터페이스의 모든 메소드가 상속 되어서 내려옴
	
	JpaRepository 에서 선언된 메소드가 상속되어 내려옴
	
	findAll() : select * from question
	save()    : insert, update
	delete()  : delete
	
	JUnit Test : 로직을 모두 생성하기 전에 DB에 값이 잘 CRUD 되는지 테스트함
	
	=============================================================================================
	
	★ 전체적인 로직
	
	client ---> Controller ---> DTO에 저장 ---> Service가 로직을 처리 (DTO : Entity) ---> Repository 
	       요청
	
	★ Service 클래스를 중간에 두게 되면 장점
	  
	1. 반복되는 코드를 방지할 수 있다.
	2. 보안을 향상할 수 있다. (Controller에서 Entity 클래스, Repository를 직접 접근하지 않는다.)
	3. DTO(client) --> Entity(DB)  //  Entity(DB) --> DTO(client)
	
	-- th: html 코드가 아니고 thymeleaf 문법 
			
	[2가지 방법]		 
			
	
	<tr th:each = "question : ${questionList}" >
		<td>
		<a th:href="@{|/question/detail/${question.id}|}" th:text="${question.subject}"></a>
		</td>
		<td th:text = "${question.createDate}"></td>
		</tr>
			
			
	<tr th:each = "question : ${questionList}" >
		<td> [[${question.subject}]]"</td>
		<td> [[${question.createDate}]]"</td>
	</tr>
			 
	=============================================================================================
	
	- src/main/resource/templates : 뷰페이지가 위치 (Thymeleaf) , *.html
    - src/main/resource/static : 외부 css, 외부 javascript , image파일
	
	=============================================================================================
	
	Thymeleaf의 layout : JSP Include와 동일한 처리를 담당
		
		- 중복된 코드를 방지할 수 있다.
		- 유지보수를 쉽게 할 수 있다.
		- 라이브러리가 등록이 되어있어야 한다.
		
		- thymeleaf 라이브러리 
		implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
		implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'	
	
	
	★ 유효성 체크 : 폼에 값을 체크해서 DB에 저장
	
		- Javascript : FrontEnd 체크
		- validate 라이브러리를 사용해서 서버에서 유효성 체크 	
		
	th:field="*{subject}" ---> name ="subject" id ="subject" value ="subject" (이 3개를 축약한 것)
	th:field="*{content}" ---> name ="content" id ="content" value ="content" (이 3개를 축약한 것)
	
	=============================================================================================
	
	★ Spring Security 라이브러리 설치
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    
    라이브러리를 설치하고 톰캣을 리부팅해야 작동이 된다.
    
    로그인 후 세션 유지기간 : 30분 (1800초)
    - 사용자명 : user
    - 비밀번호 ( 인증없이는 사이트가 접속불가) -> 리부팅할 때 마다 암호가 달라진다.
    Using generated security password: a0fc03de-b2d1-400f-b4da-b59a961db285
    
    - 모든 페이지는 인증을 통해서 접근
    - H2 Console 접근이 차단됨
    Spring Security 설정 파일에서 모듈 설정
    
    ================================================================================================
    
    MVC(Model , View , Controller) Model 
      - 협업시 다른 개발자의 코드를 쉽게 이해 가능
      - 유지 보수를 쉽게 할 수 있다. 
      - Model : 비즈니스 로직을 처리 (메소드) , Service Layer
      	-Repository (DAO) : DB의 작업을 처리 
      - View : 화면에 출력 : Thymeleaf , JSP , React, ...
      - Controller : 1. Client 요청 , 2. Service에 메소드 호출, 결과값을 리턴 -> 비즈니스 로직 처리
      				 3. View 페이지를 전송
      				 
      client --> questionForm(DTO) --> Controller --> service --> Repository --> Entity
      
    
    ================================================================================================
    
    - 검색기능 구현 : 검색어 '스프링'
    	question :
    		 -subject 컬럼에서 검색
    		 -content 컬럼에서 검색
    		 
        answer : 
        	- content 컬럼에서 검색
        site_user
        	-username 컬럼에서 검색	
     
   [JPQL : 객체 타입의 쿼리 --> 모든 DBMS 에 공통으로 작동되는 쿼리] 
   
        	
   1. question 테이블의 subject/content 컬럼을 기준으로 검색 쿼리	 
    
	select * from question where subject like '%s%';    
	select * from question where content like '%s%';    
    
   2. answer 테이블의 content 컬럼을 기준으로 검색 쿼리 
    select * from answer where content like '%s%';  
    
   3. site_user 테이블의 user_name 컬럼에서 검색
    
    select * from site_user where username like '%s%';
    
    
  실제 SQL 쿼리 ===> JPQL : 객체 타입의 쿼리 <== 모든 DBMS에 공통으로 작동되는 쿼리 
 
 ===========DB에 쿼리 =====================================================
 select  distinct q.id , q.subject, q.content, u1.username , a.content, 
            q.author_id , q.create_date, q.modify_date
from question q
   left outer join site_user u1 
        on q.author_id = u1.id 
   left outer join answer a 
         on q.id = a.question_id 
    left outer join site_user u2 
         on a.author_id = u2.id 
    
where 
      q.subject like '%스프링%' 
      or u1.username like '%스프링%' 
      or a.content like '%스프링%'
      or u2.username like '%스프링%' 
      
 ========================================================================
 	 
   
 배포 : 
 	-war : JSP , 외장 톰캣  				      <-- 서버 : JDK 17, 톰캣 : 10.1
 	-jar : Spring Boot , 톰캣을 내장 배포        <-- 서버 : JDK 17
 	
 	- 도커 환경에 배포 :						<-- 서버 : 도커만 설치
 		- 도커 이미지 : JDK27 + 톰켓:10.1 + 개발소스
 
 Jar 배포 파일 만들기
 
  menu--> run --> run configuration --> 
 
  배포 파일 위치 : WorkSpace\sbb\build\libs\0.0.1-SNAPSHOT.jar
  배포 파일 이름 : sbb-0.0.1-SNAPSHOT.jar	
  
  서버 : jdk17 설치 후 
  
   	java -jar sbb-0.0.1-SNAPSHOT.jar				<--- TCP  8686
   	방화벽 : AWS 방화벽 , Windows 방화벽(wf.msc)
 	
 	== 관리자 권한으로 명령프롬프트가 실행되어야 함 [80번포트로 실행하려면]==
 	
 	- Forground Mode 실행
 	java -jar -Dserver.port=80 sbb-0.0.1-SNAPSHOT.jar
 
 	- Background Mode 실행
 	java -jar -Dserver.port=80 sbb-0.0.1-SNAPSHOT.jar &
 	
 	
 	AWS Linux VM에 Spring Boot 배포
 	 - 컴퓨터 이름 바꾸기 : hostname  --> 리부팅 필요
 	 
 	   sudo hostnamectl set-hostname Ubuntu-vm
 	 
 	   sudo reboot
 	 
 	 - 날짜 / 타임존 변경 : UTC 시간대로 로그가 남음

	   date : 현재 시스템에 셋팅된 날짜 / 시간 / 시간대 UTC 	
 	
 	   sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
 	
 	- JDK 17설치
 		java -version
 		sudo apt update
 	
 		sudo apt install openjdk-17-jre-headless 
 		java-version
 		
 	- 프로젝트 실행 :  localhost:8686
 	java -jar sbb-0.0.1-SNAPSHOT.jar	
 		
 	- AWS의 Ubuntu VM은 기본적으로 방화벽이 비활성화 되어있음
 	 	- AWS의 방화벽만 열어주면 됨
 	      TCP 8686 포트 오픈
 	- Ubuntu-VM의 공인 IP로 접속
 	     http://공인 IP:8686
 
 
 
 -- 80번 포트에서 서비스 작동 시키기 [백그라운드 모드로 실행]
 
 	sudo java -Dserver.port=80 -jar sbb-0.0.1-SNAPSHOT.jar &
 	
 	// H2 DB의 DataBase 파일의 위치 : ubuntu
 	
 	자신의 계정의 홈 폴더에 DB파일이 위치
 	/home/ubuntu	
 		local2.my.db
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
    
  